import gymnasium as gym
from gymnasium import Wrapper
from policy import ParametricPolicy
from zerothoptim import train_0th_optim
import torch

class TorchWrapper(Wrapper):
    """
        Wrapper for our gym env to convert numpy arrays into 
        torch tensors. Simplifies passing param between 
        our RL model and our gym env.

        Generated by Claude Sonnet 4.
    """
    def __init__(self, env, device='cpu'):
        super().__init__(env)
        self.device = device
    
    def reset(self, **kwargs):
        obs, info = self.env.reset(**kwargs)
        obs = torch.from_numpy(obs).float().to(self.device)
        return obs, info
    
    def step(self, action):
        # Convert action back to numpy if needed
        if isinstance(action, torch.Tensor):
            action = action.cpu().numpy()

        obs, reward, terminated, truncated, info = self.env.step(action)
        obs = torch.from_numpy(obs).float().to(self.device)
        reward = torch.tensor(reward, dtype=torch.float32, device=self.device)

        return obs, reward, terminated, truncated, info



def main():
    env = TorchWrapper(gym.make("LunarLander-v3", continuous=True, render_mode="human"))
    train_0th_optim(env, 1)
    env.close()


if __name__ == "__main__":
    main()
